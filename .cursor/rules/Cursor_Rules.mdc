# Cursor Rules for YPO SF Gold Community Platform

## Tech Stack Adherence

### Rule 1: Framework & Language Standards
- Always use Next.js 14+ with TypeScript
- Use React 18+ hooks and patterns
- Implement proper server/client component patterns ("use client" directive when needed)
- Use Convex for all backend operations (queries, mutations, actions)
- Use Clerk for authentication (no custom auth implementations)

### Rule 2: UI Component Standards
- Use shadcn/ui components as the primary UI library
- Integrate Material-UI components where shadcn/ui doesn't provide functionality
- Use Tailwind CSS for styling with CSS variables from globals.css
- Never use hardcoded colors - always use CSS variables from style guide
- Follow the component structure: shadcn/ui > Material-UI > custom components

### Rule 3: Theme Implementation
- Always use the theme context from `@/lib/theme-context`
- Support both "festive" and "modern" themes
- Use CSS variables defined in `src/styles/globals.css`
- Fonts: Festive (Poppins headings, Lora body), Modern (Inter for all)
- Colors: Primary #007BFF, Secondary #FF7F50, Festive accents, Modern grays

### Rule 4: File Structure & Imports
- Main application code in `yposfgold-community-platform/src/`
- Use absolute imports with `@/` prefix
- Follow the structure: `@/components/`, `@/lib/`, `@/app/`, `@/hooks/`
- Export components as both named and default exports for flexibility

### Rule 5: Component Patterns
- Use MainLayout wrapper for all pages
- Implement proper loading states and error boundaries
- Use Convex hooks (useQuery, useMutation, useAction) for data operations
- Follow accessibility standards (ARIA labels, keyboard navigation)

### Rule 6: Style Guide Compliance
- Border radius: 8px for buttons/cards
- Hover effects: scale(1.05) with 0.2s transition
- Box shadows: `0 2px 4px rgba(0,0,0,0.1)` for cards
- Mobile-first responsive design with breakpoints at 768px, 1024px
- Use consistent spacing and typography scales

### Rule 7: Documentation & Testing
- Always include TypeScript interfaces for component props
- Add accessibility features (ARIA labels, keyboard navigation)
- Update documentation artifacts when making structural changes
- Use proper error handling with toast notifications

### Rule 8: Real-time & Performance
- Prioritize Convex real-time queries for dynamic UI updates
- Include error boundaries in React components
- Use proper loading states and skeleton screens
- Implement proper memoization for expensive operations

### Rule 9: Code Review & Quality
- Review v0-generated code before integration
- Ensure all components follow established patterns
- Maintain DRY principles and avoid code duplication
- Follow ESLint and TypeScript strict mode requirements

### Rule 10: Authentication & Security
- Use Clerk hooks for authentication state
- Implement proper route protection with middleware
- Handle authentication errors gracefully
- Follow security best practices for data handling

### Rule 11: Troubleshooting
- Whenever you take a troubleshooting step that doesn't resolve the issue and are going to try something else, roll back the change you made in the failed attempt.

## Quick Reference

### Colors (CSS Variables)
- Primary: `var(--primary)` (#007BFF)
- Secondary: `var(--secondary)` (#FF7F50)
- Background: `var(--background)`
- Card: `var(--card)`
- Festive accent: `var(--festive-green)` (#00FF7F)
- Modern accent: `var(--modern-gray)` (#F0F5F5)

### Typography
- Festive headings: `var(--font-poppins)`
- Festive body: `var(--font-lora)`
- Modern all: `var(--font-inter)`

### Common Patterns
- Button: `<Button variant="default" className="hover:scale-105 transition-all">`
- Card: `<Card className="shadow-md border-0">`
- Layout: `<MainLayout><Container>...</Container></MainLayout>`
- Theme: `const { theme, toggleTheme } = useTheme()`

## Enforcement Notes
- Never deviate from the established color palette
- Always use the theme context for consistent theming
- Maintain component consistency across all pages
- Update documentation when making architectural changes
description:
globs:
alwaysApply: false
---
